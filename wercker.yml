box: node:6.10

build:
  # http://devcenter.wercker.com/docs/steps/index.html
  steps:
    # Run 'npm install'
    - script:
        name: placeholder
        code: echo "Placeholder"



echo-wercker-vars:
  steps:
    # Just echo the vars for debugging
    - script:
        name: echo
        code: |
          echo "
                WERCKER_APPLICATION_OWNER_NAME: $WERCKER_APPLICATION_OWNER_NAME,
                WERCKER_APPLICATION_NAME: $WERCKER_APPLICATION_NAME,
                WERCKER_GIT_BRANCH-$WERCKER_GIT_COMMIT: $WERCKER_GIT_BRANCH-$WERCKER_GIT_COMMIT,
                WERCKER_ROOT: $WERCKER_ROOT"


test-custom-step:
  steps:
    - jacob-lindholm/step-aura
        name: test the custom step
        insecure-skip-tls-verify: true
 

deploy:
  steps:
    - script:
      name: verify required variables
      code: |
        # Required Kubernetes parameters
        if [ "$KUBERNETES_MASTER" != "" ] ; then echo "KUBERNETES_MASTER = $KUBERNETES_MASTER" ; else echo "KUBERNETES_MASTER is a required workflow variable" ; exit 1 ; fi
        if [ "$KUBERNETES_CLUSTER_ID" != "" ] ; then echo "KUBERNETES_CLUSTER_ID = $KUBERNETES_CLUSTER_ID" ; else echo "KUBERNETES_CLUSTER_ID is a required workflow variable" ; exit 1 ; fi
        if [ "$KUBERNETES_TOKEN" != "" ] ; then echo "KUBERNETES_TOKEN = $KUBERNETES_TOKEN" ; else echo "KUBERNETES_TOKEN is a required workflow variable" ; exit 1 ; fi

        # Docker varaibles
        if [ "$DOCKER_SERVER" != "" ] ; then echo "DOCKER_SERVER = $DOCKER_SERVER" ; else echo "DOCKER_SERVER is a required workflow variable" ; exit 1 ; fi
        if [ "$DOCKER_REPO" != "" ] ; then echo "DOCKER_REPO = $DOCKER_REPO" ; else echo "DOCKER_REPO is a required workflow variable" ; exit 1 ; fi
        if [ "$DOCKER_USER" != "" ] ; then echo "DOCKER_USER = $DOCKER_USER" ; else echo "DOCKER_USER is a required workflow variable" ; exit 1 ; fi
        if [ "$DOCKER_PASSWORD" != "" ] ; then echo "DOCKER_PASSWORD = $DOCKER_PASSWORD" ; else echo "DOCKER_PASSWORD is a required workflow variable" ; exit 1 ; fi
        if [ "$DOCKER_EMAIL" != "" ] ; then echo "DOCKER_EMAIL = $DOCKER_EMAIL" ; else echo "DOCKER_EMAIL is a required workflow variable" ; exit 1 ; fi


        # Variables with defaults...
        if [ "$DOCKER_SECRET_NAME" != "" ] ; then echo "DOCKER_SECRET_NAME = $DOCKER_SECRET_NAME" ; else echo "DOCKER_SECRET_NAME is a required workflow variable" ; exit 1 ; fi
        if [ "$NAMESPACE" != "" ] ; then echo "NAMESPACE = $NAMESPACE" ; else echo "NAMESPACE is a required workflow variable" ; exit 1 ; fi
        if [ "$SERVICE_ACCOUNT_NAME" != "" ] ; then echo "SERVICE_ACCOUNT_NAME = $SERVICE_ACCOUNT_NAME" ; else echo "SERVICE_ACCOUNT_NAME is a required workflow variable" ; exit 1 ; fi
        if [ "$AURA_INSTALLER_TAG" != "" ] ; then echo "AURA_INSTALLER_TAG = $AURA_INSTALLER_TAG" ; else echo "AURA_INSTALLER_TAG is a required workflow variable" ; exit 1 ; fi


        # WERCKER variables can be overridden
        # New variables can be exported and will get picked up in other steps of this workflow

    # https://github.com/wercker/step-bash-template
    # This Wercker step will look for files in our repo with a .template extension.
    # It will expand any environment variables in those files, then remove the
    # template extension.
    - bash-template

    - script:
      name: generate and save kubeconfig
      code: |
        echo "create /root/.kube"
        mkdir -p /root/.kube

        echo "Write config to file using KUBERNETES_MASTER: ${KUBERNETES_MASTER}, KUBERNETES_CLUSTER_ID: ${KUBERNETES_CLUSTER_ID}"
        echo "
        apiVersion: v1
        clusters:
          - cluster:
              insecure-skip-tls-verify: true
              server: ${KUBERNETES_MASTER}
            name: cluster-${KUBERNETES_CLUSTER_ID}
        contexts:
          - context:
              cluster: cluster-${KUBERNETES_CLUSTER_ID}
              user: user-${KUBERNETES_CLUSTER_ID}
            name: context-${KUBERNETES_CLUSTER_ID}
        current-context: context-${KUBERNETES_CLUSTER_ID}
        kind: \"\"
        users:
          - name: user-${KUBERNETES_CLUSTER_ID}
            user:
              token: ${KUBERNETES_TOKEN}
        " > /root/.kube/config

    - script:
      name: display kubeconfig
      code: |
        cat /root/.kube/config
 
    - kubectl:
        name: create namespace
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: apply -f namespace.yml 

    - kubectl:
        name: update rbac
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: apply -f rbac.yml 


    - kubectl:
        name: delete docker pull secret
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: delete secret -n ${NAMESPACE} ${DOCKER_SECRET_NAME} --ignore-not-found
        
    - kubectl:
        name: create docker pull secret
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: create secret -n ${NAMESPACE} docker-registry ${DOCKER_SECRET_NAME} --docker-server=${DOCKER_SERVER} --docker-username=${DOCKER_USER} --docker-password=${DOCKER_PASSWORD} --docker-email=${DOCKER_EMAIL}
        
    - script:
        name: "echo kubernetes deployment file"
        code: cat install-job-deployment.yml

    - kubectl:
        name: delete the delete job
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: delete job -n ${NAMESPACE} delete-aura --ignore-not-found

    - kubectl:
        name: delete previous install job
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: delete job -n ${NAMESPACE} install-aura --ignore-not-found
 
    - kubectl:
        name: deploy install-aura job
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: apply -f install-job-deployment.yml


