box: node:6.10

build:
    # Steps make up the actions in your pipeline
    # Read more about steps on our dev center:
    # http://devcenter.wercker.com/docs/steps/index.html
  #steps:
  #  - script:
  #      name: echo
  #      code: |
  #        echo "hello world!"

build:
  steps:
    # Run 'npm install'
    - script:
        name: A step that executes `npm install` command
        code: npm install  

echoWerckerVars:
  steps:
    # Just echo the vars for debugging
    - script:
        name: echo
        code: |
          echo "
                WERCKER_APPLICATION_OWNER_NAME: $WERCKER_APPLICATION_OWNER_NAME,
                WERCKER_APPLICATION_NAME: $WERCKER_APPLICATION_NAME,
                WERCKER_GIT_BRANCH-$WERCKER_GIT_COMMIT: $WERCKER_GIT_BRANCH-$WERCKER_GIT_COMMIT,
                WERCKER_ROOT: $WERCKER_ROOT"


deploy:
  steps:
    - script:
      name: verify required variables
      code: |
        if [ "$KUBERNETES_MASTER" != "" ] ; then echo "KUBERNETES_MASTER = $KUBERNETES_MASTER" ; else echo "KUBERNETES_MASTER is a required workflow variable" ; exit 1 ; fi


        if [ "$KUBERNETES_CLUSTER_ID" != "" ] ; then echo "KUBERNETES_CLUSTER_ID = $KUBERNETES_CLUSTER_ID" ; else echo "KUBERNETES_CLUSTER_ID is a required workflow variable" ; exit 1 ; fi
        if [ "$KUBERNETES_TOKEN" != "" ] ; then echo "KUBERNETES_TOKEN = $KUBERNETES_TOKEN" ; else echo "KUBERNETES_TOKEN is a required workflow variable" ; exit 1 ; fi

        if [ "$DOCKER_SERVER" != "" ] ; then echo "DOCKER_SERVER = $DOCKER_SERVER" ; else echo "DOCKER_SERVER is a required workflow variable" ; exit 1 ; fi
        if [ "$DOCKER_USER" != "" ] ; then echo "DOCKER_USER = $DOCKER_USER" ; else echo "DOCKER_USER is a required workflow variable" ; exit 1 ; fi
        if [ "$DOCKER_PASSWORD" != "" ] ; then echo "DOCKER_PASSWORD = $DOCKER_PASSWORD" ; else echo "DOCKER_PASSWORD is a required workflow variable" ; exit 1 ; fi

        if [ "$DOCKER_REPO" != "" ] ; then echo "DOCKER_REPO = $DOCKER_REPO" ; else echo "DOCKER_REPO is a required workflow variable" ; exit 1 ; fi
        if [ "$DOCKER_EMAIL" != "" ] ; then echo "DOCKER_EMAIL = $DOCKER_EMAIL" ; else echo "DOCKER_EMAIL is a required workflow variable" ; exit 1 ; fi
        if [ "$DOCKER_SECRET_NAME" != "" ] ; then echo "DOCKER_SECRET_NAME = $DOCKER_SECRET_NAME" ; else echo "DOCKER_SECRET_NAME is a required workflow variable" ; exit 1 ; fi

        if [ "$NAMESPACE" != "" ] ; then echo "NAMESPACE = $NAMESPACE" ; else echo "NAMESPACE is a required workflow variable" ; exit 1 ; fi
        if [ "$SERVICE_ACCOUNT_NAME" != "" ] ; then echo "SERVICE_ACCOUNT_NAME = $SERVICE_ACCOUNT_NAME" ; else echo "SERVICE_ACCOUNT_NAME is a required workflow variable" ; exit 1 ; fi
        if [ "$AURA_INSTALLER_TAG" != "" ] ; then echo "AURA_INSTALLER_TAG = $AURA_INSTALLER_TAG" ; else echo "AURA_INSTALLER_TAG is a required workflow variable" ; exit 1 ; fi


        if [ "$TEST_FAILURE" != "" ] ; then echo "TEST_FAILURE = $TEST_FAILURE" ; else echo "TEST_FAILURE is a required workflow variable" ; ; exit 1 ; fi

#
#
#

hold-for-later:
  steps:
    # https://github.com/wercker/step-bash-template
    # This Wercker step will look for files in our repo with a .template extension.
    # It will expand any environment variables in those files, then remove the
    # template extension.
    - bash-template

    - script:
      name: generate and save kubeconfig
      code: |
        echo "create /root/.kube"
        mkdir -p /root/.kube

        echo "Write config to file using KUBERNETES_MASTER: ${KUBERNETES_MASTER}, KUBERNETES_CLUSTER_ID: ${KUBERNETES_CLUSTER_ID}"
        echo "
        apiVersion: v1
        clusters:
          - cluster:
              insecure-skip-tls-verify: true
              server: ${KUBERNETES_MASTER}
            name: cluster-${KUBERNETES_CLUSTER_ID}
        contexts:
          - context:
              cluster: cluster-${KUBERNETES_CLUSTER_ID}
              user: user-${KUBERNETES_CLUSTER_ID}
            name: context-${KUBERNETES_CLUSTER_ID}
        current-context: context-${KUBERNETES_CLUSTER_ID}
        kind: \"\"
        users:
          - name: user-${KUBERNETES_CLUSTER_ID}
            user:
              token: ${KUBERNETES_TOKEN}
        " > /root/.kube/config
    - script:
      name: display kubeconfig
      code: |
        cat /root/.kube/config
 
    - kubectl:
        name: create namespace
        is_skippable: true
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: apply -f namespace.yml 
 
    - kubectl:
        name: delete docker pull secret
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: delete secret -n ${NAMESPACE} ${DOCKER_SECRET_NAME} --ignore-not-found
        
    - kubectl:
        name: create docker pull secret
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: create secret -n ${NAMESPACE} docker-registry ${DOCKER_SECRET_NAME} --docker-server=${DOCKER_SERVER} --docker-username=${DOCKER_USER} --docker-password=${DOCKER_PASSWORD} --docker-email=${DOCKER_EMAIL}
        
    - script:
        name: "echo kubernetes deployment file"
        code: cat install-job-deployment.yml
    

    # Deploy the app with istio side car injection (manual)
    - kubectl:
        name: deploy aura-installer job
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        #command: apply -f <(istioctl kube-inject -f kubernetes-deployment.yml)
        command: apply -f install-job-deployment.yml

 


deploy-app-to-oce:
  steps:
    - bash-template
    
    - script:
      name: Install istioctl
      code: |
        pwd
        echo "Installing istioctl"
        curl -L --compressed https://github.com/istio/istio/releases/download/0.2.7/istio-0.2.7-linux.tar.gz | tar -xz -C $PWD && export PATH=${PWD}/istio-0.2.7/bin:$PATH
        pwd
        
    - script:
      name: Check istioctl version
      code: |
        echo "Checking istioctl version"
        istioctl version
        
    # Wercker kubectl step currently doesn't support embedded istioctl commands like manual side car injection
    # Hence as a *workaround*, in this step we generate and save your kubeconfig for embedded istioctl to work
    - script:
      name: generate and save kubeconfig
      code: |
        mkdir -p /root/.kube
        echo "
        apiVersion: v1
        clusters:
          - cluster:
              insecure-skip-tls-verify: true
              server: ${KUBERNETES_MASTER}
            name: cluster-${KUBERNETES_CLUSTER_ID}
        contexts:
          - context:
              cluster: cluster-${KUBERNETES_CLUSTER_ID}
              user: user-${KUBERNETES_CLUSTER_ID}
            name: context-${KUBERNETES_CLUSTER_ID}
        current-context: context-${KUBERNETES_CLUSTER_ID}
        kind: ""
        users:
          - name: user-${KUBERNETES_CLUSTER_ID}
            user:
              token: ${KUBERNETES_TOKEN}
        " > /root/.kube/config
        
    - script:
        name: "Visualise Kubernetes deployment"
        code: cat kubernetes-deployment.yml
    
    - kubectl:
        name: delete wcr secret
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: delete secret wrelease --ignore-not-found
        
    - kubectl:
        name: create wcr secret
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: create secret docker-registry wrelease --docker-server=wcr.io --docker-username=$WERCKER_APPLICATION_OWNER_NAME --docker-password=$KUBERNETES_TOKEN --docker-email=$DOCKER_EMAIL
        
    # Deploy the app with istio side car injection (manual)
    - kubectl:
        name: create deplyoment
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: apply -f <(istioctl kube-inject -f kubernetes-deployment.yml)

functional-test:
  steps:
    - script:
        name: Run and Test creditscore api
        code: |
              mkdir -p "/pipeline"
              node $WERCKER_ROOT/app.js &
              sleep 5
              CREDITSCORE_URL=http://localhost:3000/api/creditscore
              echo 'Microservice URL=' $CREDITSCORE_URL
              if curl -X POST -H "Content-Type: application/json" -X POST -d '{"firstname":"John","lastname":"Doe","dateofbirth":"01/01/2015","ssn":"111223333"}' $CREDITSCORE_URL | grep "firstname"
              then
                  # if the keyword is in the conent
                  echo "Test passed"
              else
                  echo "Test failed"
                  exit -1
              fi
              sleep 1

ui-functional-test:
  box:
    id: peternagy/chrome-protractor-headless-test:node9.2-chrome62
  steps:
    - script:
        name: Run UI test
        code: | 
              nohup node $WERCKER_ROOT/app.js > creditscoreapp.log &
              echo 'Application URL to test: http://localhost:3000/creditscore'
              protractor $WERCKER_ROOT/test/protractor.conf.js
              exit_status=$?
              echo 'CreditScore app server log :::START'
              cat creditscoreapp.log
              echo 'CreditScore app server log :::END'
              if [ $exit_status -eq 0 ]; then
                echo "UI test passed"
              else
                echo "UI test failed"
                exit -1
              fi                
              

